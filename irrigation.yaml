---
# inspired  from: https://github.com/bruxy70/Irrigation-with-display
# thanks for ppl from Esphome discord server 
# Forked from: https://github.com/brianhanifin/esphome-config
# 
#
substitutions:
  project: Irrigation Controller
  id: irrigation

 # Edit file below to chamge gpio layout
  <<: !include irr2/common/substitutions/gpio/sonoff4chpror2.yaml
 # reset all relays to OFF state at reboot 
esphome:
  # turn everything off on boot...
  on_boot:
    priority: -10
    # ...
    then:
      - switch.turn_off: relay1
      - switch.turn_off: relay2
      - switch.turn_off: relay3
      - switch.turn_off: R4
  name: $id
  platform: ESP8266
  board: nodemcuv2
  includes:
    - irrigation.h

  <<: !include irr2/common/esphome/leds/status_with_api.yaml
  # your wifi data here
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  output_power: 10



  # Disable rebooting due to losing connection with Home Assistant. This will allow
  # the watering schedule to continue if Home Assistant goes down. Should it become
  # unresponsive, we can have Home Assistant power cycle a smart plug to reboot it.
  reboot_timeout: 0s

  # Using these as a precaution to ensure solid WiFi connectivity.
  power_save_mode: none
 

<<: !include irr2/common/ota.yaml
<<: !include irr2/common/logger.yaml

# Enable Home Assistant API
# Example configuration.yaml entry

api:

globals:
  # ============================================================================= #
  # Irrigation time remaining
  - id: remaining_time1
    type: int
    restore_value: no
    initial_value: "300"
  - id: remaining_time2
    type: int
    restore_value: no
    initial_value: "300"

  # ============================================================================= #
  # Store previous values to verify change.
  - id: remaining_time1_previous
    type: int
    restore_value: no
    initial_value: "0"
  - id: remaining_time2_previous
    type: int
    restore_value: no
    initial_value: "0"

# Common housekeeping components.
output:
  <<: !include irr2/common/outputs/status_led.yaml

light:
  <<: !include irr2/common/lights/status_led.yaml


binary_sensor:
  - !include irr2/common/binary_sensors/status.yaml
  - <<: !include irr2/common/binary_sensors/main.yaml


  # ============================================================================= #
  # If not use Sonoff 4CH Pro R2 you can skip it
  # Buttons along the left side of the  (R1, R2, R3, R4).
  - platform: gpio
    id: key1
    pin:
      number: $button1_gpio
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: irrigation_zone1

  - platform: gpio
    id: key2
    pin:
      number: $button2_gpio
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: irrigation_zone2
        


switch:
  #- !include common/switches/restart.yaml
  # virtual switch to cancel whole automations 
  - platform: template
    name: Automation
    id: automation
    optimistic: true

  - platform: template
    name: "RELAY4"
    id: R4
   # optimistic: true
    inverted: true
    turn_on_action:
      - switch.turn_on: relay4
      - switch.template.publish:
          id: R4
          state: ON
    turn_off_action:
      - switch.turn_off: relay4
      - switch.template.publish:
          id: R4
          state: OFF
     
 # water pump switch. Can skip if dont need
 
  - platform: template
    name: "Hydrofor"
    id: pump
#    optimistic: true
    turn_on_action:
      - switch.turn_on: relayg
      - switch.template.publish:
          id: pump
          state: ON
    turn_off_action:
      - switch.template.publish:
          id: pump
          state: OFF
      # Update the next scheduled run time.
      - text_sensor.template.publish:
          id: irrigation_zone1_next
          state: !lambda |-
            return update_next_runtime(id(irrigation_zone1_times).state);
      - text_sensor.template.publish:
          id: irrigation_zone2_next
          state: !lambda |-
            return update_next_runtime(id(irrigation_zone2_times).state);
     
      - if:
         condition:
           lambda: |-
            return (!id(irrigation_zone1).state && !id(irrigation_zone2).state);
         then:
           - switch.turn_off: relayg
  #virtual switch for trigger pump and tell 
   #pressure automation if water is needed
  - platform: template
    name: relayG
    id: relayg
    optimistic: true
    turn_on_action:
      - if: 
         condition:
           sensor.in_range:
             id: water_pressure
             below: 1.8
         then: 
           - switch.turn_on: relay3
    turn_off_action:
      - if:
         condition:
           lambda: |-
            return (!id(irrigation_zone1).state && !id(irrigation_zone2).state);
         then:
           - switch.turn_off: relay3

  # ============================================================================= #
  # Virtual Zone Switches which toggle the relay, and store the current state.
  - platform: template
    name: Irrigation Zone1
    id: irrigation_zone1
    lambda: return id(relay1).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition: 
          lambda: |- 
            return (id(irrigation_zone1_duration).state > 0 && !id(automation).state);
        then:
          - switch.turn_on: relay1
          - switch.turn_on: relayg
    turn_off_action:
      - switch.turn_off: relay1
  # now wait delay time, and turn off water pump
  # if other zone don't need it  
      - if:
         condition:
           lambda: |-
            return (!id(irrigation_zone2).state && !id(pump).state);
         then:
           - delay: 5s
           - switch.turn_off: relayg
  


  - platform: template
    name: Irrigation Zone2
    id: irrigation_zone2
    lambda: return id(relay2).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition: 
          lambda: |- 
            return (id(irrigation_zone2_duration).state > 0 && !id(automation).state);
        then:
          - switch.turn_on: relay2
          - switch.turn_on: relayg
    turn_off_action:
      - switch.turn_off: relay2
  # now wait delay time, and turn off water pump
  # if other zone don't need it         
      - if:
         condition:
           lambda: |-
            return (!id(irrigation_zone1).state && !id(pump).state);
         then:
           - delay: 5s
           - switch.turn_off: relayg
            
      


  # ============================================================================= #
  # Relays which trigger solenoids
  - platform: gpio
    id: relay1
    pin: $relay1_gpio
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time1
            value: !lambda return id(irrigation_zone1_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: irrigation_zone1_remaining
            state: !lambda return id(irrigation_zone1_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: irrigation_zone1_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: irrigation_zone1_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: irrigation_zone1_next
            state: !lambda |-
              return update_next_runtime(id(irrigation_zone1_times).state);

  - platform: gpio
    id: relay2
    pin: $relay2_gpio
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time2
            value: !lambda return id(irrigation_zone2_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: irrigation_zone2_remaining
            state: !lambda return id(irrigation_zone2_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: irrigation_zone2_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: irrigation_zone2_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: irrigation_zone2_next
            state: !lambda |-
              return update_next_runtime(id(irrigation_zone2_times).state);

 # relay used for pump, commented unecesary part
  - platform: gpio
    id: relay3
    pin: $relay3_gpio
    
    #relay4
  - platform: gpio
    id: relay4
    pin: $relay4_gpio


sensor:
  - !include irr2/common/sensors/uptime.yaml
  - !include irr2/common/sensors/wifi_signal.yaml

    
  # ============================================================================= #
  # Retrieve durations settings from the Home Assistant UI.
  - platform: homeassistant
    id: ui_zone1_duration
    entity_id: input_number.irrigation_zone1_duration
    on_value:
      then:
      - sensor.template.publish:
          id: irrigation_zone1_duration
          state: !lambda return id(ui_zone1_duration).state;

  - platform: homeassistant
    id: ui_zone2_duration
    entity_id: input_number.irrigation_zone2_duration
    on_value:
      then:
      - sensor.template.publish:
          id: irrigation_zone2_duration
          state: !lambda return id(ui_zone2_duration).state;

  # ============================================================================= #
  # Store durations.
  - platform: template
    name: Irrigation Zone1 Duration
    id: irrigation_zone1_duration
  - platform: template
    name: Irrigation Zone2 Duration
    id: irrigation_zone2_duration

  # ============================================================================= #
  # Countdown sensors.
  - platform: template
    name: Irrigation Zone1 Remaining
    id: irrigation_zone1_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer-outline
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time1) == 0;
            then:
              - switch.turn_off: irrigation_zone1

  - platform: template
    name: Irrigation Zone2 Remaining
    id: irrigation_zone2_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer-outline
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time2) == 0;
            then:
              - switch.turn_off: irrigation_zone2
              
 #=======≠========sensor pressure water pump
#==================≠

  - platform: adc
    pin: A0
    name: "water_pressure"
    icon: mdi:gauge
    update_interval: 250ms
    id: water_pressure
    unit_of_measurement: "BAR"
    accuracy_decimals: 1
    #attenuation: 11db
    filters:
      - calibrate_linear:
        - 0.057 -> 0.0
        - 1.028 -> 35
        # voltage divider is 367/100 

      - sliding_window_moving_average:
          window_size: 30
          send_every: 15
        
        
    on_value_range:
        - above: 1.8
          then:
            - switch.turn_off: relay3
        - below: 1.5
          then:
            - if: 
                condition: 
                  switch.is_on: relayg
                then: 
                  - switch.turn_on: relay3


#signal sensor    
 # - platform: wifi_signal
#    name: "WiFi Strength Hydrofor"
#    update_interval: 120s
 


text_sensor:
  # ============================================================================= #
  # Retrieve list of times from the Home Assistant UI.
  - platform: homeassistant
    id: ui_zone1_times
    entity_id: input_text.irrigation_zone1_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: irrigation_zone1_times
            state: !lambda return id(ui_zone1_times).state;

  - platform: homeassistant
    id: ui_zone2_times
    entity_id: input_text.irrigation_zone2_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: irrigation_zone2_times
            state: !lambda return id(ui_zone2_times).state;

  # ============================================================================= #
  # Store time lists.
  - platform: template
    name: Irrigation Zone1 Times
    id: irrigation_zone1_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: irrigation_zone1_next
            state: !lambda |-
              return update_next_runtime(id(irrigation_zone1_times).state);

  - platform: template
    name: Irrigation Zone2 Times
    id: irrigation_zone2_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: irrigation_zone2_next
            state: !lambda |-
              return update_next_runtime(id(irrigation_zone2_times).state);

  # ============================================================================= #
  # Set the next scheduled time.
  - platform: template
    name: Irrigation Zone1 Next
    id: irrigation_zone1_next
  - platform: template
    name: Irrigation Zone2 Next
    id: irrigation_zone2_next


# Update the countdown timers every 5 seconds.
interval:
  - interval: 5s
    then:
      - lambda: |-
          if (id(remaining_time1) > 0) {
            // Store the previous time.
            id(remaining_time1_previous) = id(remaining_time1);

            // When the relay is on.
            if (id(relay1).state) {
              // Decrement the timer.
              id(remaining_time1) -= 5;

              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time1) <= 0 || id(irrigation_zone1_remaining).state > id(irrigation_zone1_duration).state){
              if (id(remaining_time1) <= 0) {
                id(irrigation_zone1).turn_off();
                id(remaining_time1) = 0;
              }
            }

            // Update the remaining time display.
            if (id(remaining_time1_previous) != id(remaining_time1)) {
              id(irrigation_zone1_remaining).publish_state( (id(remaining_time1)/60) + 1 );
            }
          }

          if (id(remaining_time2) > 0) {
            // Store the previous time.
            id(remaining_time2_previous) = id(remaining_time2);

            // When the relay is on.
            if (id(relay2).state) {
              // Decrement the timer.
              id(remaining_time2) -= 5;

              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time2) <= 0 || id(irrigation_zone2_remaining).state > id(irrigation_zone2_duration).state){
              if (id(remaining_time2) <= 0) {
                id(irrigation_zone2).turn_off();
                id(remaining_time2) = 0;
              }
            }

            // Update the remaining time display.
            if (id(remaining_time2_previous) != id(remaining_time2)) {
              id(irrigation_zone2_remaining).publish_state( (id(remaining_time2)/60) + 1 );
            }
          }


# Time based automations.
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              if (scheduled_runtime(id(irrigation_zone1_next).state.c_str())) {
                id(irrigation_zone1).turn_on();
              }
              if (scheduled_runtime(id(irrigation_zone2_next).state.c_str())) {
                id(irrigation_zone2).turn_on();
              }
    # resets automation suspend...
    # Every 2 days at specific time
    # in case of lost connectiin with HA
    #  - seconds: 0
    #    minutes: 30
    #    hours: 7
   #     days_of_week: 2,4,6
     #   then:
      #    - switch.turn_off: automation
